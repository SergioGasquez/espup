import { Button, GroupBox, ComboBox, CheckBox, LineEdit, HorizontalBox, ScrollView  } from "std-widgets.slint";

export global Args := {
    property <string> xtensa-rust-version;
    property <string> export-file;
    property <string> default-host;
    property <string> log-level: "info";
    property <string> esp-idf-version: "none";
    property <string> nightly-version: "nightly";
    property <bool> profile-minimal: true;
    property <bool> install-mode: true;
    // Targets
    property <bool> esp32-value: true;
    property <bool> esp32s2-value: true;
    property <bool> esp32s3-value: true;
    property <bool> esp32c2-value: true;
    property <bool> esp32c3-value: true;
    // Crates
    property <bool> espflash-value;
    property <bool> cargo-espflash-value;
    property <bool> cargo-generate-value;
    property <bool> ldproxy-value;
    property <bool> sccache-value;

    property <bool> uninstall-enable: false;
    property <string> button: "Install";
    callback uninstall();
    callback install();
}

App := Window {
    title: "EspUp";
    width: 700px;
    height: 700px;
    ScrollView {
        VerticalLayout {
            GroupBox {
                title: "Targets:";
                HorizontalBox {
                    esp32 := CheckBox {
                        enabled: Args.install-mode;
                        text: "ESP32";
                        checked <=> Args.esp32-value;
                    }
                    esp32s2 := CheckBox {
                        enabled: Args.install-mode;
                        text: "ESP32-S2";
                        checked <=> Args.esp32s2-value;
                    }
                    esp32s3 := CheckBox {
                        enabled: Args.install-mode;
                        text: "ESP32-S3";
                        checked <=> Args.esp32s3-value;
                    }
                    esp32c2 := CheckBox {
                        enabled: Args.install-mode;
                        text: "ESP32-C2";
                        checked <=> Args.esp32c2-value;
                    }
                    esp32c3 := CheckBox {
                        enabled: Args.install-mode;
                        text: "ESP32-C3";
                        checked <=> Args.esp32c3-value;
                    }
                }
            }
            GroupBox {
                title: "Extra Crates:";
                HorizontalBox {
                    espflash := CheckBox {
                        enabled: Args.install-mode;
                        text: "espflash";
                        checked <=> Args.espflash-value;
                    }
                    cargo-espflash := CheckBox {
                        enabled: Args.install-mode;
                        text: "cargo-espflash";
                        checked <=> Args.cargo-espflash-value;
                    }
                    cargo-generate := CheckBox {
                        enabled: Args.install-mode;
                        text: "cargo-generate";
                        checked <=> Args.cargo-generate-value;
                    }
                    ldproxy := CheckBox {
                        enabled: Args.install-mode;
                        text: "ldproxy";
                        checked <=>  Args.ldproxy-value;
                    }
                    sccache := CheckBox {
                        enabled: Args.install-mode;
                        text: "sccache";
                        checked <=> Args.sccache-value;
                    }
                }
            }
            GroupBox {
                title: "Xtensa Rust Version";
                vertical-stretch: 0;
                LineEdit {
                    text <=> Args.xtensa-rust-version;
                }
            }
            GroupBox {
                title: "Nightly Rust Version";
                vertical-stretch: 0;
                LineEdit {
                    enabled: Args.install-mode;
                    text <=> Args.nightly-version;
                }
            }
            GroupBox {
                title: "Export file";
                vertical-stretch: 0;
                LineEdit {
                    enabled: Args.install-mode;
                    text <=> Args.export-file;
                }
            }

            GroupBox {
                title: "Default Host";
                vertical-stretch: 0;
                ComboBox {
                    current-value <=> Args.default-host;
                    model: [ "x86_64-unknown-linux", "aarch64-unknown-linux-gnu", "x86_64-apple-darwin", "aarch64-apple-darwin","x86_64-pc-windows-msvc", "x86_64-pc-windows-gnu",];
                }
            }
            // GroupBox {
            //     title: "LLVM Version";
            //     vertical-stretch: 0;

            //      ComboBox {
            //         model: ["15"];
            //     }
            // }
            GroupBox {
                title: "Log Level";
                vertical-stretch: 0;
                ComboBox {
                    current-value <=> Args.log-level;
                    model: ["debug", "info", "warn", "error"];
                }
            }
            GroupBox {
                title: "ESP-IDF Version";
                vertical-stretch: 0;
                ComboBox {
                    enabled: Args.install-mode;
                    current-value <=> Args.esp-idf-version;
                    model: [ "none", "release/v4.4", "release/v5.0", "master", "v4.4.1", "v4.4.2", "v4.4.3"];
                    selected(version) => {
                        if (version != "none") {
                            Args.ldproxy-value = true;
                        } else {
                            Args.ldproxy-value = false;
                        }
                    }
                }
            }
            GroupBox {
                minimal := CheckBox {
                    text: "Minify Installation?";
                    checked <=> Args.profile-minimal;
                }
                Button {
                    text: "Uninstall";
                    enabled: Args.uninstall-enable;
                    clicked => {
                        Args.uninstall();
                    }
                }
                Button {
                    text: Args.button;
                    clicked => {
                        Args.install();
                    }
                }
            }
        }
    }
}
